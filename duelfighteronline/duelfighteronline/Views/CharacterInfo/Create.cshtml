@model duelfighteronline.Models.CharacterInfo

@{
    ViewBag.Title = "Create";

    @functions {



    }
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <script type="text/javascript">
        var maxStats = 30;
        var currentStats = [0, 0, 0, 0];        
        currentStats[0] = currentStats[0] + parseInt(document.getElementById("statStrength").value);
        currentStats[1] = currentStats[1] + parseInt(document.getElementById("statDexterity").value);
        currentStats[2] = currentStats[2] + parseInt(document.getElementById("statVitality").value);
        currentStats[3] = currentStats[3] + parseInt(document.getElementById("statLuck").value);
        function OnChangeEvent(modifiedStat)   
        {
            switch (String(modifiedStat)) {
                case "statStrength":
                    statToTest = 0
                    break;
                case "statDexterity":
                    statToTest = 1;
                    break;
                case "statVitality":
                    statToTest = 2;
                    break;
                case "statLuck":
                    statToTest = 3;
                    break;
            }
            var testStat = 0;
            testStat = testStat + parseInt(document.getElementById(modifiedStat).value);
            if (testStat > currentStats[statToTest]) {
                var availableStats = 0;
                availableStats = availableStats + parseInt(document.getElementById("availableStats").value);
                if (availableStats > 0) {
                    currentStats[statToTest] = testStat;
                    var sum = 0;
                    sum = sum + parseInt(document.getElementById("statStrength").value);
                    sum = sum + parseInt(document.getElementById("statDexterity").value);
                    sum = sum + parseInt(document.getElementById("statVitality").value);
                    sum = sum + parseInt(document.getElementById("statLuck").value);
                    sum = sum - parseInt(4);
                    document.getElementById("availableStats").value = parseInt((maxStats - sum));
                } else {
                    var fixStats = 0;
                    fixStats = fixStats + parseInt(document.getElementById(modifiedStat).value);
                    document.getElementById(modifiedStat).value = parseInt(fixStats - 1);
                }
            } else if (testStat < currentStats[statToTest])
            {
                if (testStat > 0) {
                    var temp = 0;
                    temp = temp + parseInt(document.getElementById("availableStats").value);
                    document.getElementById("availableStats").value = parseInt(temp + 1);
                } 
            }

        }
    </script>
    <div class="form-horizontal">
        <h4>CharacterInfo</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CharacterName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CharacterClass, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.CharacterClass, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CharacterClass, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Level, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StatPointsAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StatPointsAvailable, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", id = "availableStats" } })
                @Html.ValidationMessageFor(model => model.StatPointsAvailable, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Health, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Health, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Health, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Strength, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Strength, new { htmlAttributes = new { @class = "form-control", min = 1, id = "statStrength", onchange = "OnChangeEvent('statStrength')" } })
                @Html.ValidationMessageFor(model => model.Strength, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dexterity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dexterity, new { htmlAttributes = new { @class = "form-control", min = 1, id = "statDexterity", onchange = "OnChangeEvent('statDexterity')" } })
                @Html.ValidationMessageFor(model => model.Dexterity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Vitality, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Vitality, new { htmlAttributes = new { @class = "form-control", id = "statVitality", min = 1, onchange = "OnChangeEvent('statVitality')" } })
                @Html.ValidationMessageFor(model => model.Vitality, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Luck, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Luck, new { htmlAttributes = new { @class = "form-control", id = "statLuck", min = 1, onchange = "OnChangeEvent('statLuck')" } })
                @Html.ValidationMessageFor(model => model.Luck, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}



<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/detectStatChange")
}

